public static int[] implementMergeSort(int arr[], int start, int end)
    { 
    int inputLength = arr.length;
	    
	    if (inputLength < 2) {
	      return arr;
	    }
	    
	    int midIndex = inputLength / 2;
	    int[] leftHalf = new int[midIndex];
	    int[] rightHalf = new int[inputLength - midIndex];
	    
	    for (int i = 0; i < midIndex; i++) {
	      leftHalf[i] = arr[i];
	    }
	    for (int i = midIndex; i < inputLength; i++) {
	      rightHalf[i - midIndex] = arr[i];
	    }
	    
	    implementMergeSort(leftHalf,0,leftHalf.length);
	    implementMergeSort(rightHalf,0,rightHalf.length);
	    
	    
		return merge(arr, leftHalf, rightHalf);
	  }

	  private static int[] merge (int[] arr, int[] leftHalf, int[] rightHalf) {
	    int leftSize = leftHalf.length;
	    int rightSize = rightHalf.length;
	    
	    int i = 0, j = 0, k = 0;
	    
	    while (i < leftSize && j < rightSize) {
	      if (leftHalf[i] <= rightHalf[j]) {
	        arr[k] = leftHalf[i];
	        i++;
	      }
	      else {
	        arr[k] = rightHalf[j];
	        j++;
	      }
	      k++;
	    }
	    
	    while (i < leftSize) {
	      arr[k] = leftHalf[i];
	      i++;
	      k++;
	    }
	    
	    while (j < rightSize) {
	      arr[k] = rightHalf[j];
	      j++;
	      k++;
	    }
	
		return arr;
	  }
